# --------------------------------------------------------
# Written by Yufei Ye (https://github.com/JudyYe)
# --------------------------------------------------------

from __future__ import print_function

import imageio
import numpy as np
import os
import xml.etree.ElementTree as ET

import torch
import torch.nn
from PIL import Image
from torch.utils.data import Dataset
import torchvision.transforms as transforms


class VOCDataset(Dataset):
    CLASS_NAMES = ['aeroplane', 'bicycle', 'bird', 'boat', 'bottle', 'bus', 'car',
                   'cat', 'chair', 'cow', 'diningtable', 'dog', 'horse', 'motorbike',
                   'person', 'pottedplant', 'sheep', 'sofa', 'train', 'tvmonitor']
    INV_CLASS = {}
    for i in range(len(CLASS_NAMES)):
        INV_CLASS[CLASS_NAMES[i]] = i

    # TODO: Adjust data_dir according to where **you** stored the data
    def __init__(self, split, size, data_dir='VOCdevkit/VOC2007/'):
        super().__init__()
        self.split = split
        self.data_dir = data_dir
        self.size = size
        self.img_dir = os.path.join(data_dir, 'JPEGImages')
        self.ann_dir = os.path.join(data_dir, 'Annotations')

        split_file = os.path.join(data_dir, 'ImageSets/Main', split + '.txt')
        with open(split_file) as fp:
            self.index_list = [line.strip() for line in fp]

        self.anno_list = self.preload_anno()
        

    @classmethod
    def get_class_name(cls, index):
        return cls.CLASS_NAMES[index]

    @classmethod
    def get_class_index(cls, name):
        return cls.INV_CLASS[name]

    def __len__(self):
        return len(self.index_list)

    def preload_anno(self):
        """
        :return: a list of lables. each element is in the form of [class, weight],
         where both class and weight are a numpy array in shape of [20],
        """
        label_list = []
        for index in self.index_list:
            fpath = os.path.join(self.ann_dir, index + '.xml')
            tree = ET.parse(fpath)
            node = tree.getroot()
            class_ = np.zeros(20,)
            weight = np.ones(20,)
            # TODO: insert your code here, preload labels
            for elem in tree.iter():
                if(elem.tag=='object'): 
                    class_found= elem.find('name').text
                    idx=self.get_class_index(class_found)
                    class_[idx]=1
                    if elem.find('difficult').text=='1':
                        weight[idx]=0
        
            label_list.append([class_,weight])

        return label_list

    def data_augment(self,img):
        
        mean = [123.68/255, 116.78/255, 103.94/255] #to check as original mean is around ~0.4-0.5 probably /255 
        std=[0.229, 0.224, 0.225] 
        cropped_size=400
        if(self.split=='trainval'):
            t=transforms.Compose([
                            transforms.RandomResizedCrop(cropped_size),
                            transforms.RandomHorizontalFlip(),
                            transforms.ToTensor(),
                            transforms.Normalize(mean, std),   
                       ])
            
        else:
            t=transforms.Compose([
                           transforms.CenterCrop(cropped_size),
                            transforms.ToTensor(),
                           transforms.Normalize(mean, std)
                       ])
            
        img=t(img)
        return img
        
    
    def __getitem__(self, index):
        """
        :param index: a int generated by Dataloader in range [0, __len__()]
        :return: index-th element
        image: FloatTensor in shape of (C, H, W) in scale [-1, 1].
        label: LongTensor in shape of (Nc, ) binary label
        weight: FloatTensor in shape of (Nc, ) difficult or not.
        """
        findex = self.index_list[index]
        fpath = os.path.join(self.img_dir, findex + '.jpg')
        # TODO: insert your code here. hint: read image, find the labels and weight.
        img = Image.open(fpath)
        img = self.data_augment(img)
        
        label,wgt=self.anno_list[index]
        

        image = torch.FloatTensor(img)
        label = torch.FloatTensor(label)
        wgt = torch.FloatTensor(wgt)
        return image, label, wgt
